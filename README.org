#+TITLE: Optimisation Toolkit, /OPTK/

[[Tests][https://github.com/MaximeRobeyns/OPTK/workflows/Project%20build%20and%20test/badge.svg]] [[Documentation Build][https://github.com/MaximeRobeyns/OPTK/workflows/Compile%20and%20re-deploy%20documentation/badge.svg]]

*Warning*: This library is not yet finished. Please only expect useful output
when this warning message has been removed and replaced with a usage guide.

Developer documentation can be found at https://maximerobeyns.github.io/OPTK.

** What is OPTK?

OPTK (read /optic/) is a collection of synthetic optimisation benchmarks, aiming
to help the development of new Bayesian optimisation methods. This includes
methods which aim to combine real-valued variables with integer-valued or
categorical variables.

While it is written in C++, I plan to add Python bindings and perhaps others
(e.g. MATLAB or Julia) to help include existing implementations in benchmark
comparisons, as well as allowing folks to write implementations in a language
they are comfortable with.

OPTK uses a definition of a parameter space which is similar to that used by
[[https://github.com/microsoft/nni][Microsoft's NNI library]] and others. The idea is to make it easy to re-use
implementations written for OPTK with these libraries with minimal modification
for use by practitioners.

The currently implemented benchmarks are an aggregation of those found in [[https://arxiv.org/abs/1308.4008][this
survey]] (Jamil et al. 2013), as well as C++ implementations of the [[https://github.com/sigopt/evalset][evalset]]
functions (Dewancker et al. 2016). While these are currently continuous
functions, I plan to add discrete transformations taking integer-valued
inputs.

I am also working on improving the output; performance of optimisation methods
will be compared by taking trajectories and calculating the area under the
curve. In addition to the raw data output, I plan to output pgf plots for easy
inclusion in reports and papers. The benchmarks are tagged with relevant
characteristics (e.g. scalable, continuous, separable etc.), which will also be
provided alongside the output data.

#+BEGIN_COMMENT
** Usage Guide

/Warning/ this is purely speculative

Here is the command line interface which is acting as a specification for what
the program does:

#+BEGIN_SRC bash
Usage: optk [options] algorithm...

Options:
  -b <benchmark>...   Only run the specified <benchmark>
  -o <dir>            Place the outputs into <dir>

Examples:
./optk gp_tuner
./optk -b synthetic nas -o /results/test1 smac
#+END_SRC

At the simplest level, =optk= works as a benchmarking program, which takes in an
optimisation algorithm, and will produce a set of traces (iteration, objective
value) pairs for each benchmark, which it will save in a csv file in the
=/results= directory in a file with the same name as the provided algorithm:

#+END_COMMENT

* Licence

Copyright (C) 2020 Maxime Robeyns

Written for the Advanced Computing Research Centre, University of Bristol.

Licensed under the Educational Community License, Version 2.0
(the "License"); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

http://www.osedu.org/licenses/ECL-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

* References

Jamil, M., & Yang, X., A Literature Survey of Benchmark Functions For Global Optimization Problems, International Journal of Mathematical Modelling and Numerical Optimisation, 4(2), 150 (2013).  http://dx.doi.org/10.1504/IJMMNO.2013.055204

Dewancker, I., McCourt, M., Clark, S., Hayes, P., Johnson, A., & Ke, G., A Stratified Analysis of Bayesian Optimization Methods, arXiv:1603.09441 [cs, stat], (),  (2016).

Ying, C., Klein, A., Real, E., Christiansen, E., Murphy, K., & Hutter, F., NAS-Bench-101: Towards Reproducible Neural Architecture Search, arXiv:1902.09635 [cs, stat], (),  (2019).
